# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import server_services_pb2 as server__services__pb2

GRPC_GENERATED_VERSION = '1.68.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in server_services_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class SendFileServiceStub(object):
    """Service definition for file upload
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SendFile = channel.unary_unary(
                '/server_services.SendFileService/SendFile',
                request_serializer=server__services__pb2.SendFileRequestBody.SerializeToString,
                response_deserializer=server__services__pb2.SendFileResponseBody.FromString,
                _registered_method=True)
        self.SendFileChunks = channel.stream_unary(
                '/server_services.SendFileService/SendFileChunks',
                request_serializer=server__services__pb2.SendFileChunksRequest.SerializeToString,
                response_deserializer=server__services__pb2.SendFileChunksResponse.FromString,
                _registered_method=True)
        self.ConvertCsvToXml = channel.unary_unary(
                '/server_services.SendFileService/ConvertCsvToXml',
                request_serializer=server__services__pb2.ConvertCsvToXmlRequest.SerializeToString,
                response_deserializer=server__services__pb2.ConvertCsvToXmlResponse.FromString,
                _registered_method=True)
        self.AddCoordinatesToCsv = channel.unary_unary(
                '/server_services.SendFileService/AddCoordinatesToCsv',
                request_serializer=server__services__pb2.AddCoordinatesToCsvRequest.SerializeToString,
                response_deserializer=server__services__pb2.AddCoordinatesToCsvResponse.FromString,
                _registered_method=True)
        self.CreateTablesAndInsertData = channel.unary_unary(
                '/server_services.SendFileService/CreateTablesAndInsertData',
                request_serializer=server__services__pb2.CreateTablesAndInsertDataRequest.SerializeToString,
                response_deserializer=server__services__pb2.CreateTablesAndInsertDataResponse.FromString,
                _registered_method=True)
        self.GetSalesByCountry = channel.unary_unary(
                '/server_services.SendFileService/GetSalesByCountry',
                request_serializer=server__services__pb2.GetSalesByCountryRequest.SerializeToString,
                response_deserializer=server__services__pb2.GetSalesByCountryResponse.FromString,
                _registered_method=True)
        self.ListProfitableProducts = channel.unary_unary(
                '/server_services.SendFileService/ListProfitableProducts',
                request_serializer=server__services__pb2.ListProfitableProductsRequest.SerializeToString,
                response_deserializer=server__services__pb2.ListProfitableProductsResponse.FromString,
                _registered_method=True)
        self.CalculateDiscountedSales = channel.unary_unary(
                '/server_services.SendFileService/CalculateDiscountedSales',
                request_serializer=server__services__pb2.CalculateDiscountedSalesRequest.SerializeToString,
                response_deserializer=server__services__pb2.CalculateDiscountedSalesResponse.FromString,
                _registered_method=True)
        self.GetSalesByGender = channel.unary_unary(
                '/server_services.SendFileService/GetSalesByGender',
                request_serializer=server__services__pb2.GetSalesByGenderRequest.SerializeToString,
                response_deserializer=server__services__pb2.GetSalesByGenderResponse.FromString,
                _registered_method=True)


class SendFileServiceServicer(object):
    """Service definition for file upload
    """

    def SendFile(self, request, context):
        """RPC for sending a complete file
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendFileChunks(self, request_iterator, context):
        """RPC for sending file chunks as a stream
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConvertCsvToXml(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddCoordinatesToCsv(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateTablesAndInsertData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSalesByCountry(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListProfitableProducts(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CalculateDiscountedSales(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSalesByGender(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SendFileServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SendFile': grpc.unary_unary_rpc_method_handler(
                    servicer.SendFile,
                    request_deserializer=server__services__pb2.SendFileRequestBody.FromString,
                    response_serializer=server__services__pb2.SendFileResponseBody.SerializeToString,
            ),
            'SendFileChunks': grpc.stream_unary_rpc_method_handler(
                    servicer.SendFileChunks,
                    request_deserializer=server__services__pb2.SendFileChunksRequest.FromString,
                    response_serializer=server__services__pb2.SendFileChunksResponse.SerializeToString,
            ),
            'ConvertCsvToXml': grpc.unary_unary_rpc_method_handler(
                    servicer.ConvertCsvToXml,
                    request_deserializer=server__services__pb2.ConvertCsvToXmlRequest.FromString,
                    response_serializer=server__services__pb2.ConvertCsvToXmlResponse.SerializeToString,
            ),
            'AddCoordinatesToCsv': grpc.unary_unary_rpc_method_handler(
                    servicer.AddCoordinatesToCsv,
                    request_deserializer=server__services__pb2.AddCoordinatesToCsvRequest.FromString,
                    response_serializer=server__services__pb2.AddCoordinatesToCsvResponse.SerializeToString,
            ),
            'CreateTablesAndInsertData': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateTablesAndInsertData,
                    request_deserializer=server__services__pb2.CreateTablesAndInsertDataRequest.FromString,
                    response_serializer=server__services__pb2.CreateTablesAndInsertDataResponse.SerializeToString,
            ),
            'GetSalesByCountry': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSalesByCountry,
                    request_deserializer=server__services__pb2.GetSalesByCountryRequest.FromString,
                    response_serializer=server__services__pb2.GetSalesByCountryResponse.SerializeToString,
            ),
            'ListProfitableProducts': grpc.unary_unary_rpc_method_handler(
                    servicer.ListProfitableProducts,
                    request_deserializer=server__services__pb2.ListProfitableProductsRequest.FromString,
                    response_serializer=server__services__pb2.ListProfitableProductsResponse.SerializeToString,
            ),
            'CalculateDiscountedSales': grpc.unary_unary_rpc_method_handler(
                    servicer.CalculateDiscountedSales,
                    request_deserializer=server__services__pb2.CalculateDiscountedSalesRequest.FromString,
                    response_serializer=server__services__pb2.CalculateDiscountedSalesResponse.SerializeToString,
            ),
            'GetSalesByGender': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSalesByGender,
                    request_deserializer=server__services__pb2.GetSalesByGenderRequest.FromString,
                    response_serializer=server__services__pb2.GetSalesByGenderResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'server_services.SendFileService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('server_services.SendFileService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class SendFileService(object):
    """Service definition for file upload
    """

    @staticmethod
    def SendFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/server_services.SendFileService/SendFile',
            server__services__pb2.SendFileRequestBody.SerializeToString,
            server__services__pb2.SendFileResponseBody.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SendFileChunks(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(
            request_iterator,
            target,
            '/server_services.SendFileService/SendFileChunks',
            server__services__pb2.SendFileChunksRequest.SerializeToString,
            server__services__pb2.SendFileChunksResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ConvertCsvToXml(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/server_services.SendFileService/ConvertCsvToXml',
            server__services__pb2.ConvertCsvToXmlRequest.SerializeToString,
            server__services__pb2.ConvertCsvToXmlResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AddCoordinatesToCsv(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/server_services.SendFileService/AddCoordinatesToCsv',
            server__services__pb2.AddCoordinatesToCsvRequest.SerializeToString,
            server__services__pb2.AddCoordinatesToCsvResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateTablesAndInsertData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/server_services.SendFileService/CreateTablesAndInsertData',
            server__services__pb2.CreateTablesAndInsertDataRequest.SerializeToString,
            server__services__pb2.CreateTablesAndInsertDataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetSalesByCountry(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/server_services.SendFileService/GetSalesByCountry',
            server__services__pb2.GetSalesByCountryRequest.SerializeToString,
            server__services__pb2.GetSalesByCountryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListProfitableProducts(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/server_services.SendFileService/ListProfitableProducts',
            server__services__pb2.ListProfitableProductsRequest.SerializeToString,
            server__services__pb2.ListProfitableProductsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CalculateDiscountedSales(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/server_services.SendFileService/CalculateDiscountedSales',
            server__services__pb2.CalculateDiscountedSalesRequest.SerializeToString,
            server__services__pb2.CalculateDiscountedSalesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetSalesByGender(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/server_services.SendFileService/GetSalesByGender',
            server__services__pb2.GetSalesByGenderRequest.SerializeToString,
            server__services__pb2.GetSalesByGenderResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
