version: '3.8'

services:
  grpc-server:
    build: ./grpc-server
    container_name: grpc-server-tutorial
    ports:
      - "50051:50051"
    volumes:
      - grpc-server:/app/media
    environment:
      - GRPC_SERVER_PORT=50051
      - MAX_WORKERS=10
      - MEDIA_PATH=/app/media
      - DBNAME=mydatabase
      - DBUSERNAME=myuser
      - DBPASSWORD=mypassword
      - DBHOST=db
      - DBPORT=5432
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=user
      - RABBITMQ_PW=password
    depends_on:
      - db
      - rabbitmq
    networks:
      - mynetwork  

  rest-api-server:
    build: ./rest_api_server
    container_name: rest-api-server
    ports:
      - "8000:8000"
    environment:
      - GRPC_PORT=50051
      - GRPC_HOST=grpc-server
      - DBNAME=mydatabase
      - DBUSERNAME=myuser
      - DBPASSWORD=mypassword
      - DBHOST=db
      - DBPORT=5432
    depends_on:
      - db
      - grpc-server
    networks:
      - mynetwork
      

  db:
    image: postgres:latest
    container_name: postgres-db
    environment:
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypassword
      POSTGRES_DB: mydatabase
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - mynetwork  

  rabbitmq:
    image: rabbitmq:3.9-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: user
      RABBITMQ_DEFAULT_PASS: password
    networks:
      - mynetwork  

  worker:
    build: ./worker-rabbit-csv
    container_name: worker
    ports:
      - "8003:8003"
    environment:
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=user
      - RABBITMQ_PW=password
      - DBNAME=mydatabase
      - DBUSERNAME=myuser
      - DBPASSWORD=mypassword
      - DBHOST=db
      - DBPORT=5432
    depends_on:
      - rabbitmq
      - db
      - grpc-server
    networks:
      - mynetwork  


  graphql-server:
    build: ./graphql-server/graphql  # Caminho para o Dockerfile dentro do diret√≥rio graphql
    container_name: graphql-server
    ports:
      - "5000:5000"  # Expondo a porta 5000
    environment:
      - DBNAME=mydatabase
      - DBUSERNAME=myuser
      - DBPASSWORD=mypassword
      - DBHOST=db
      - DBPORT=5432
    depends_on:
      - db  # O graphql-server depende do db estar pronto antes de iniciar
    networks:
      - mynetwork  
  
  frontend:
    build:
      context: ./frontend
    container_name: frontend
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_GRAPHQL_API=http://localhost:5000/graphql
    depends_on:
      - graphql-server
      - rest-api-server
    networks:
      - mynetwork
      
  
volumes:
  grpc-server:
  pgdata:


networks:
  mynetwork:
    driver: bridge